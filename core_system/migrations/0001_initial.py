# Generated by Django 4.2.17 on 2025-06-15 08:20

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('authentication', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CalendarEvent',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('event_type', models.CharField(choices=[('release', 'Content Release'), ('meeting', 'Live Meeting'), ('assignment', 'Assignment'), ('quiz', 'Quiz'), ('lecture', 'Lecture')], max_length=20)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('is_all_day', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=10)),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('meeting_url', models.URLField(blank=True, max_length=500, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attendees', models.ManyToManyField(blank=True, related_name='calendar_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='CalendarPermissions',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='calendar_permissions', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('can_create_events', models.BooleanField(default=False)),
                ('can_edit_events', models.BooleanField(default=False)),
                ('can_delete_events', models.BooleanField(default=False)),
                ('can_view_all_courses', models.BooleanField(default=False)),
                ('allowed_course_ids', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Calendar permissions',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField()),
                ('long_description', models.TextField(blank=True, null=True)),
                ('banner_url', models.URLField(max_length=500)),
                ('preview_video_url', models.URLField(blank=True, max_length=500, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('discount_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('level', models.CharField(choices=[('Beginner', 'Beginner'), ('Intermediate', 'Intermediate'), ('Advanced', 'Advanced'), ('All Levels', 'All Levels')], max_length=20)),
                ('language', models.CharField(choices=[('en', 'English'), ('es', 'Spanish'), ('fr', 'French'), ('de', 'German'), ('pt', 'Portuguese'), ('ru', 'Russian'), ('zh', 'Chinese'), ('ja', 'Japanese'), ('ar', 'Arabic')], default='en', max_length=10)),
                ('duration', models.CharField(max_length=20)),
                ('rating', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('review_count', models.PositiveIntegerField(default=0)),
                ('students_enrolled', models.PositiveIntegerField(default=0)),
                ('is_published', models.BooleanField(default=False)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseCategory',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Course Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CourseSection',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='core_system.course')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('course', 'order')},
            },
        ),
        migrations.CreateModel(
            name='DripSchedule',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('fixed', 'Fixed Dates'), ('relative', 'Relative to Enrollment')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drip_schedules', to='core_system.course')),
            ],
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('completed', models.BooleanField(default=False)),
                ('progress_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('last_accessed', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='core_system.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-enrolled_at'],
                'unique_together': {('student', 'course')},
            },
        ),
        migrations.CreateModel(
            name='Lecture',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('order', models.PositiveIntegerField(default=0)),
                ('duration', models.CharField(max_length=20)),
                ('overview', models.TextField(blank=True, null=True)),
                ('preview_available', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lectures', to='core_system.coursesection')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('section', 'order')},
            },
        ),
        migrations.CreateModel(
            name='NotificationPreferences',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='notification_preferences', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('email_notifications', models.BooleanField(default=True)),
                ('push_notifications', models.BooleanField(default=True)),
                ('reminder_minutes', models.JSONField(default=list)),
                ('event_types', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('instructions', models.TextField()),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('points_possible', models.PositiveIntegerField(default=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='core_system.course')),
                ('lecture', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quizzes', to='core_system.lecture')),
                ('section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quizzes', to='core_system.coursesection')),
            ],
            options={
                'verbose_name_plural': 'Quizzes',
                'ordering': ['due_date'],
            },
        ),
        migrations.CreateModel(
            name='QuizGrade',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('overall_score', models.FloatField()),
                ('feedback', models.TextField(blank=True, null=True)),
                ('graded_at', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('graded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='graded_quizzes', to=settings.AUTH_USER_MODEL)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='core_system.quiz')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_grades', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-graded_at'],
                'unique_together': {('quiz', 'student')},
            },
        ),
        migrations.CreateModel(
            name='QuizSubmission',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('text_response', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('graded', 'Graded'), ('needs_revision', 'Needs Revision')], default='submitted', max_length=20)),
                ('grade', models.FloatField(blank=True, null=True)),
                ('feedback', models.TextField(blank=True, null=True)),
                ('instructor_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='core_system.quiz')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-submitted_at'],
                'unique_together': {('student', 'quiz')},
            },
        ),
        migrations.CreateModel(
            name='QuizTask',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('question', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('required', models.BooleanField(default=True)),
                ('accepts_files', models.BooleanField(default=False)),
                ('accepted_file_types', models.JSONField(blank=True, null=True)),
                ('max_file_size', models.PositiveIntegerField(blank=True, null=True)),
                ('max_files', models.PositiveIntegerField(blank=True, null=True)),
                ('accepts_text', models.BooleanField(default=False)),
                ('sample_answer', models.TextField(blank=True, null=True)),
                ('points', models.PositiveIntegerField(default=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='core_system.quiz')),
            ],
        ),
        migrations.CreateModel(
            name='TaskGrade',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('score', models.FloatField()),
                ('feedback', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('grade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_grades', to='core_system.quizgrade')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='core_system.quiztask')),
            ],
        ),
        migrations.CreateModel(
            name='SubmissionFile',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=500)),
                ('type', models.CharField(choices=[('video', 'Video'), ('pdf', 'PDF'), ('image', 'Image'), ('audio', 'Audio'), ('document', 'Document'), ('code', 'Code')], max_length=10)),
                ('name', models.CharField(max_length=200)),
                ('size', models.PositiveIntegerField()),
                ('mime_type', models.CharField(max_length=100)),
                ('thumbnail_url', models.URLField(blank=True, max_length=500, null=True)),
                ('duration', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='core_system.quizsubmission')),
            ],
        ),
        migrations.CreateModel(
            name='QuizQuestion',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('question', models.TextField()),
                ('options', models.JSONField()),
                ('correct_option_index', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='core_system.quiz')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='QaItem',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('question', models.TextField()),
                ('answer', models.TextField(blank=True, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('upvotes', models.PositiveIntegerField(default=0)),
                ('resolved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('asked_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions_asked', to=settings.AUTH_USER_MODEL)),
                ('lecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='qa_items', to='core_system.lecture')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='ProjectTool',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('url', models.URLField(max_length=500)),
                ('icon', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_tools', to='core_system.lecture')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(choices=[('card', 'Credit Card'), ('paypal', 'PayPal'), ('mpesa', 'M-Pesa'), ('crypto', 'Cryptocurrency')], max_length=10)),
                ('status', models.CharField(choices=[('paid', 'Paid'), ('pending', 'Pending'), ('failed', 'Failed')], default='pending', max_length=10)),
                ('purchased_at', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='core_system.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-purchased_at'],
            },
        ),
        migrations.CreateModel(
            name='LectureResource',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('kind', models.CharField(choices=[('video', 'Video'), ('pdf', 'PDF'), ('link', 'Link'), ('file', 'File')], max_length=10)),
                ('url', models.URLField(max_length=500)),
                ('provider', models.CharField(blank=True, choices=[('youtube', 'YouTube'), ('vimeo', 'Vimeo'), ('self', 'Self-hosted'), ('drive', 'Google Drive'), ('dropbox', 'Dropbox'), ('external', 'External')], max_length=10, null=True)),
                ('duration_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('is_downloadable', models.BooleanField(default=False)),
                ('file_size', models.PositiveIntegerField(blank=True, null=True)),
                ('mime_type', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='core_system.lecture')),
            ],
        ),
        migrations.CreateModel(
            name='GradingCriterion',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('description', models.TextField()),
                ('points', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grading_criteria', to='core_system.quiztask')),
            ],
            options={
                'verbose_name_plural': 'Grading Criteria',
            },
        ),
        migrations.CreateModel(
            name='Faq',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('question', models.CharField(max_length=200)),
                ('answer', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='faqs', to='core_system.course')),
            ],
            options={
                'verbose_name': 'FAQ',
                'verbose_name_plural': 'FAQs',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='DripScheduleEntry',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('day_offset', models.PositiveIntegerField(blank=True, null=True)),
                ('release_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lecture', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='drip_entries', to='core_system.lecture')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='core_system.dripschedule')),
                ('section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='drip_entries', to='core_system.coursesection')),
            ],
            options={
                'verbose_name_plural': 'Drip schedule entries',
                'ordering': ['day_offset', 'release_date'],
            },
        ),
        migrations.CreateModel(
            name='CriteriaGrade',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('awarded_points', models.PositiveIntegerField()),
                ('comments', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('criterion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='core_system.gradingcriterion')),
                ('task_grade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criteria_grades', to='core_system.taskgrade')),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='courses', to='core_system.coursecategory'),
        ),
        migrations.AddField(
            model_name='course',
            name='instructor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses_taught', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CalendarNotification',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('reminder', 'Reminder'), ('update', 'Update'), ('cancellation', 'Cancellation')], max_length=20)),
                ('message', models.TextField()),
                ('scheduled_for', models.DateTimeField()),
                ('sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='core_system.calendarevent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendar_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['scheduled_for'],
            },
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendar_events', to='core_system.course'),
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_events', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='related_lecture',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='core_system.lecture'),
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('published_at', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='announcements', to='core_system.course')),
            ],
            options={
                'ordering': ['-published_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentProgressControl',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('is_auto_release_enabled', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress_controls', to='core_system.course')),
                ('locked_lectures', models.ManyToManyField(blank=True, related_name='locked_for', to='core_system.lecture')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress_controls', to=settings.AUTH_USER_MODEL)),
                ('unlocked_lectures', models.ManyToManyField(blank=True, related_name='unlocked_for', to='core_system.lecture')),
            ],
            options={
                'unique_together': {('student', 'course')},
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='core_system.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('course', 'student')},
            },
        ),
        migrations.CreateModel(
            name='PlannedCourseRelease',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('release_date', models.DateTimeField()),
                ('is_released', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='planned_releases', to='core_system.course')),
                ('lecture', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='releases', to='core_system.lecture')),
                ('related_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='releases', to='core_system.calendarevent')),
                ('section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='releases', to='core_system.coursesection')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='planned_releases', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['release_date'],
                'unique_together': {('course', 'student', 'section', 'lecture')},
            },
        ),
        migrations.CreateModel(
            name='CourseProgress',
            fields=[
                ('enrollment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='progress', serialize=False, to='core_system.enrollment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_lectures', models.ManyToManyField(blank=True, to='core_system.lecture')),
                ('last_accessed_lecture', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core_system.lecture')),
            ],
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('issued_at', models.DateTimeField(auto_now_add=True)),
                ('certificate_url', models.URLField(max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to='core_system.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-issued_at'],
                'unique_together': {('student', 'course')},
            },
        ),
    ]
